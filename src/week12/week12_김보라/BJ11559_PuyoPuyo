package week12.week12_김보라;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.List;
import java.util.Queue;

public class BJ11559_PuyoPuyo {

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		map = new char[12][6];
		for(int r = 0; r<12; r++) {
			String s = br.readLine();
			for(int c = 0; c<6; c++) {
				map[r][c]=s.charAt(c);
			}
		}
		
		int count = 0;
        while(true) {
            boolean isFinished = true;
            visited = new boolean[12][6];
            for(int i = 0; i < 12; i++) {
                for(int j = 0; j < 6; j++) {
                    if(map[i][j] != '.') {
                        list = new ArrayList<>();
                        bfs(map[i][j], i, j);
                        
                        if(list.size() >= 4) {
                            isFinished = false; 
                            for(int k = 0; k < list.size(); k++) {
                            	map[list.get(k)[0]][list.get(k)[1]] = '.';
                            }
                        }
                    }
                }
            }
            if(isFinished) break;
            for (int i = 0; i < 12; i++) {
                for (int j = 5; j > 0; j--) {
                    if (map[j][i] == '.') {
                        for (int k = j - 1; k >= 0; k--) {
                            if (map[k][i] != '.') {
                            	map[j][i] = map[k][i];
                            	map[k][i] = '.';
                                break;
                            }
                        }
                    }
                }
            }
            count++;
        }
        System.out.println(count);
		
		
	}
	static char[][] map;
	static boolean[][] visited;
    static List<int[]> list;
    public static void bfs(char c, int x, int y) {
    	int[] dx = {0,0,1,-1};
    	int[] dy = {1,-1,0,0};
    	
        Queue<int[]> q = new ArrayDeque<>();
        list.add(new int[] {x, y});
        q.add(new int[] {x, y});
        visited[x][y] = true;
        
        while(!q.isEmpty()) {
            int[] cur = q.poll();
            
            for(int i = 0; i < 4; i++) {
                int nx = cur[0] + dx[i];
                int ny = cur[1] + dy[i];
                
                if(nx >= 0 && ny >= 0 && nx < 12 && ny < 6 && !visited[nx][ny] && map[nx][ny] == c) {
                    visited[nx][ny] = true;
                    list.add(new int[] {nx,ny});
                    q.offer(new int[] {nx,ny});
                }
            }
        }
    }

}
